/*   SoundManager 2: Javascript Sound for the Web   --------------------------------------------   http://www.schillmania.com/projects/soundmanager2/   Copyright (c) 2007, Scott Schiller. All rights reserved.   Code licensed under the BSD License:   http://www.schillmania.com/projects/soundmanager2/license.txt   V2.0b.20070415   Compiling AS to Flash 8 SWF using MTASC (free compiler - http://www.mtasc.org/):   mtasc -swf soundmanager2.swf -main -header 16:16:30 SoundManager2.as -version 8   cd /projects/bolaji.net/v6/www/02/music   /Applications/mtasc1.12/mtasc -cp "/Applications/Macromedia Flash 8/First Run/Classes" -swf sm2.swf -main -header 16:16:30 SoundManager2.as -version 8   ActionScript Sound class reference (Macromedia):   http://livedocs.macromedia.com/flash/8/main/wwhelp/wwhimpl/common/html/wwhelp.htm?context=LiveDocs_Parts&file=00002668.html*/import mx.remoting.Service;import mx.remoting.PendingCall;import mx.rpc.ResultEvent;import mx.rpc.FaultEvent;import mx.rpc.RelayResponder;import mx.utils.Delegate;import mx.remoting.debug.NetDebug;import flash.external.ExternalInterface; // wooclass SoundManager2 {  static var app : SoundManager2;  static var delegate : FlashRemoteDelegate;  static var baseJSController = "soundManager";  static var baseJSObject = baseJSController + ".sounds";  // internal objects  var sounds = []; // indexed string array  var soundObjects = []; // associative Sound() object array  var timer = null;  var timerInterval = 50;  var pollingEnabled = false; // polling (timer) flag - disabled by default, enabled by JS->Flash call  var conn:NetConnection;  var stream:NetStream;  function _externalInterfaceTest() {    writeDebug('_externalInterfaceTest()');    return true; // to verify that a call from JS to here, works. (eg. JS receives "true", thus OK.)  }  function _checkProgress(sID) {    var bL = 0;    var bT = 0;    var nD = 0;    var nP = 0;	var oSound = this.soundObjects[curr];      bL = stream.bytesLoaded;      bT = stream.bytesTotal;      nD = oSound.duration||0; // can sometimes be null with short MP3s? Wack.      nP = stream.time;	//writeDebug('checkProgress url['+oSound.sID+'] bL['+bL+'] bT['+bT+'] nD['+nD+'] nP['+nP+']');	if(bL && bT && bL != bT)	{		ExternalInterface.call("soundManager.sounds['"+currSound.sID+"']._whileloading", bL, bT, nD);		//ExternalInterface.call(baseJSObject+"['"+oSound.sID+"']._whileloading",bL,bT,nD);	}	if(typeof nP != 'undefined' && nP != nD)	{		ExternalInterface.call("soundManager.sounds['"+currSound.sID+"']._whileplaying", bL, bT, nD, nP);		//ExternalInterface.call(baseJSObject+"['"+oSound.sID+"']._whileplaying",bL,bT,nD,nP);	}  }  function _setPosition(nSecOffset,isPaused) {    var s = soundObjects[curr];    writeDebug('_setPosition() ' + nSecOffset + ' - ' + s.duration + ' - ' + (s.duration * nSecOffset / 100) );    s.lastValues.position = s.position;    //s.start(s.duration * (nSecOffset / 100), 0); // start playing at new position	stream.seek(s.duration * (nSecOffset / 100));    if (isPaused) s.stop();  }  function onLoad(bSuccess) {	//checkProgress(); // ensure progress stats are up-to-date	// force duration update (doesn't seem to be always accurate)	//ExternalInterface.call(baseJSObject+"['"+sID+"']._whileloading",this.getBytesLoaded(),this.getBytesTotal(),this.duration);	//ExternalInterface.call(baseJSObject+"['"+sID+"']._onload",bSuccess?1:0);  }  function _unload(sID,sURL) {    // effectively "stop" loading by loading a tiny MP3    writeDebug('_unload()');    stream.close();  }  function _stop(sID,bStopAll) {  	stream.close();  }  function _pause () {    writeDebug('_pause()');	var s = soundObjects[curr];  	// reference current position, stop sound  	s.paused = !s.pause;  	s.lastposition = s.position;  	writeDebug('_pause(): position: '+s.lastposition);  	stream.pause();  }  function _setPan (nPan) {    soundObjects[curr].setPan(nPan);  }  function _setVolume (nVol) {    this.soundObjects[curr].setVolume(nVol);    writeDebug('_setVolume() ' + nVol);	var s:Object = new Sound();	s.setVolume(nVol);  }  function _setPolling(bPolling) {  }    /****************************************************************************************************   *   *  BEGIN   *   ****************************************************************************************************/      var curr;   var currSound;  function _createSound (sID,justBeforeFinishOffset) {	writeDebug('_createSound CALLED : ' + sID);	var s = sID.split("|");	writeDebug('_createSound s['+s+']');	var aID;	if(s.length==2)	{		sID=s[0];		aID=s[1];		writeDebug('_createSound sID['+sID+'] aID['+aID+']');	}	 //TODO: GET SONGLIST	var result = delegate.call(sID, aID, this, "handleSongList", "handleRemotingError");  }  function _load(sID,sURL,bStream,bAutoPlay) {	writeDebug('_load() sid['+sID+'] bStream['+bStream+'] bAutoPlay['+bAutoPlay+']');    var s = this.soundObjects[sID];    s.loaded = true;    s.didJustBeforeFinish = false;	this.soundObjects[sID] = s;  }  function _start (sID,nLoops,nMsecOffset) {	writeDebug("_start sID["+sID+"]");	if(sID != null)	{		var sound = this.soundObjects[sID];		writeDebug("_start url["+(sound.url.split("!")[0])+"] track["+(sound.url.split("!")[1])+"]");		sound.lastValues.paused = false; // reset pause if applicable		sound.loaded = true;		this.curr = sID;		this.currSound = sound;		//TODO: FIX STATEFUL CONNECTIONS PROBLEM		//MAKE SURE NET CONNECTION IS REUSED FOR EACH PLAYBACK		if(this.conn == null)		{			this.conn = new NetConnection();			this.conn.connect(sound.url.split("!")[0]);			this.conn.sm = this;			this.conn.s = sound;			this.conn.so = this.soundObjects;			this.conn.onStatus = function(infoObject)			{				ExternalInterface.call("soundManager['_writeDebug']","(Flash): "+infoObject.code+" ("+infoObject.description+")");				for (var prop in infoObject)				{					ExternalInterface.call("soundManager['_writeDebug']","(Flash): \t"+prop+":\t"+infoObject[prop]);				}					// once we are connected to the server create the nsPlay NetStream object				if (infoObject.code == "NetConnection.Connect.Success")				{					ExternalInterface.call("soundManager['_writeDebug']","(Flash): sm["+this.sm+"]");					this.sm.playStream();				}			}		}		else		{			this.conn.sm = this;			this.conn.s = sound;			this.conn.so = this.soundObjects;			this.playStream();		}		delegate.call("NumOfPlay", "music.song:" + sID, this, "handleRemotingResult", "handleRemotingError");	} } function playStream() {	var nc = this.conn;	this.stream = new NetStream(nc);	var ns = this.stream;	ExternalInterface.call("soundManager['_writeDebug']","(Flash): NetStream.play("+(nc.s.url.split("!")[1])+")");	//ns.play("mp3:"+nc.s.url.split("!")[1]);	ns.play(nc.s.url.split("!")[1]);	ns.s = nc.s;	ns.so = nc.so;	ns.onStatus = function(info:Object) {		ExternalInterface.call("soundManager['_writeDebug']","(Flash): NetStream.onStatus called code["+info.code+"]");		if(info.code == "NetStream.Play.Stop")		{			ExternalInterface.call("soundManager['_writeDebug']","(Flash): onPlayStop called");			ExternalInterface.call("soundManager['_writeDebug']","(Flash): _start() sound["+ns.s.sID+"] aid["+ns.s.aid+"] sid["+ns.s.sid+"] loaded");			ExternalInterface.call("soundManager.sounds['"+ns.s.sID+"']._onfinish");		}		else if(info.code == "NetStream.Play.Start")		{			ExternalInterface.call("soundManager['_writeDebug']","(Flash): onPlayStart called");		}		else if(info.code == "NetStream.Pause.Notify")		{			ExternalInterface.call("soundManager['_writeDebug']","(Flash): onPlayStart called");		}		else if(info.code == "NetStream.Unpause.Notify")		{			ExternalInterface.call("soundManager['_writeDebug']","(Flash): onPlayStart called");		}	 }	ns.onMetaData = function(info:Object) {		for (var propName:String in info) 		{			ExternalInterface.call("soundManager['_writeDebug']","(Flash): " + propName + " = [" + info[propName ] + "]");		}		ns.s.duration = info.duration;		ns.so[ns.s.sID] = ns.s;		ExternalInterface.call("soundManager['_writeDebug']","(Flash): _start() sound["+ns.s.sID+"] aid["+ns.s.aid+"] sid["+ns.s.sid+"] loaded");		ExternalInterface.call("soundManager.sounds['"+ns.s.sID+"']._onload",1,ns.s.sID,ns.s.aid,ns.s.sid,ns.s.metadata);	} }  function _playNext () {	  writeDebug('playNext CALLED');	  var s = soundObjects[curr];	  if(s != null) stream.close();	  writeDebug('playNext curr['+curr+'] next['+s.next+']');	  if(s.next != null && typeof s.next != 'undefined')	  {	  	var next = soundObjects[s.next.split('|')[1]];	  	writeDebug('playNext curr['+s.sID+'] next['+next.sID+'] next['+next.sid+'] aid['+next.aid+'] url['+next.url+']');	  	_start(next.sid);	  }  }  function _playPrev () {	  writeDebug('playPrev CALLED');	  var s = this.soundObjects[curr];	  if(s != null) stream.close();	  writeDebug('playPrev curr['+curr+'] prev['+s.prev+']');	  if(s.prev != null && typeof s.prev != 'undefined') {	  	var prev = this.soundObjects[s.prev.split('|')[1]];	  	writeDebug('playPrev currSID['+s.sID+'] sid['+prev.sID+'] aid['+prev.aid+'] url['+prev.url+']');	  	_start(prev.sid);      }  }  /****************************************************************************************************   *   *  END   *   ****************************************************************************************************/  function writeDebug(s) {    ExternalInterface.call(baseJSController+"['_writeDebug']","(Flash): "+s);  }	function handleSongList(re:ResultEvent) {	//Implement custom callback code	writeDebug(" *** handleSongList Result: ccID[" + re.result.ccID + "]");	writeDebug(" *** handleSongList Result: items[" + re.result.items +"]");	//ccID = re.result.ccID;	var items = re.result.items;	for(var i=0;i<items.length;i++) {		var item = items[i].split('|');		var s = new Object();		s.didJustBeforeFinish = false;		s.sID = re.result.ccID;		s.aid = item[0];		s.sid = item[1];		s.url = item[2];		s.metadata = item[3];		s.paused = false;		s.loaded = false;		//s.justBeforeFinishOffset = justBeforeFinishOffset||0;		s.justBeforeFinishOffset = 0;		s.lastValues = {		  bytes: 0,		  position: 0,		  nLoops: 1		};		s.prev = (i-1) >= 0 ? items[i-1] : null;		s.next = (i+1) <= items.length ? items[i+1] : null;		soundObjects[item[1]] = s;		_load(item[1],true,false);		sounds.push(item[1]);	}	ExternalInterface.call(baseJSController+"['initComplete']",null);  }  function handleRemotingResult(re:ResultEvent) {	writeDebug('*** handleRemotingResult Result: ' + re.result);  }  function handleRemotingError(fault:FaultEvent) {	writeDebug('*** handleRemotingError message: ' + fault.fault.faultstring);	NetDebug.trace({level:"None", message:"Error: " + fault.fault.faultstring });  }  function SoundManager2() {	  ExternalInterface.addCallback('_load', this, _load);	  ExternalInterface.addCallback('_unload', this, _unload);	  ExternalInterface.addCallback('_stop', this, _stop);	  ExternalInterface.addCallback('_start', this, _start);	  ExternalInterface.addCallback('_pause', this, _pause);	  ExternalInterface.addCallback('_setPosition', this, _setPosition);	  ExternalInterface.addCallback('_setPan', this, _setPan);	  ExternalInterface.addCallback('_setVolume', this, _setVolume);	  ExternalInterface.addCallback('_setPolling', this, _setPolling);	  ExternalInterface.addCallback('_externalInterfaceTest', this, _externalInterfaceTest);	  ExternalInterface.addCallback('_createSound', this, _createSound);	  ExternalInterface.addCallback('_playNext', this, _playNext);	  ExternalInterface.addCallback('_playPrev', this, _playPrev);	  ExternalInterface.addCallback('_checkProgress', this, _checkProgress);  }   // entry point  static function main(mc) {    app = new SoundManager2();	delegate = new FlashRemoteDelegate();  } }