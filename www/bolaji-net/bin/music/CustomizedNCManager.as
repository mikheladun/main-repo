//****************************************************************************//Copyright (C) 2004-2005 Macromedia, Inc. All Rights Reserved.//The following is Sample Code and is subject to all restrictions on//such code as contained in the End User License Agreement accompanying//this product.//****************************************************************************import mx.video.*;/** * <p>ProgressiveOnlyNCManager is pretty much a copy of NCManager with all code related * to parsing SMIL and to handling streaming from FCS pulled out.  Using this * with VideoPlayer will result in slightly smaller SWFs than using the NCManager. * Size difference is 8.8k with this class versus 13.1k with the NCManager and * SMILManager.  Note that these sizes just reflect the classes themselves and * not additional AS code needed to use the classes and other assets you would * want.</p> * * @see mx.video.INCManager * @see mx.video.NCManager */class CustomizedNCManager implements INCManager {	// my VideoPlayer	private var _owner:VideoPlayer;	// server connection info	private var _contentPath:String;	// info on successful xn	private var _nc:NetConnection;	public function NCManager()	{		_contentPath = undefined;		_nc = undefined;	}	/*	 * @see INCManager#getTimeout()	 */	public function getTimeout():Number {		return undefined;	}	/*	 * @see INCManager#setTimeout()	 */	public function setTimeout(t:Number):Void {		// do nothing	}	/**	 * For RTMP streams, returns value calculated from autodetection,	 * not value set via setBitrate().	 *	 * @see INCManager#getBitrate()	 */	public function getBitrate():Number {		return undefined;	}	/**	 * This value is only used with progressive download (HTTP), with	 * RTMP streaming uses autodetection.	 *	 * @see INCManager#getBitrate()	 */	public function setBitrate(b:Number):Void {		// do nothing	}	/**	 * @see INCManager#getVideoPlayer()	 */	public function getVideoPlayer():VideoPlayer {		return _owner;	}	/**	 * @see INCManager#setVideoPlayer()	 */	public function setVideoPlayer(v:VideoPlayer):Void {		_owner = v;	}	/**	 * @see INCManager#getNetConnection()	 */	public function getNetConnection():NetConnection {		return _nc;	}	/**	 * @see INCManager#getStreamName()	 */	public function getStreamName():String {		return _contentPath;	}	/**	 * @see INCManager#isRTMP()	 */	public function isRTMP():Boolean {		return true;	}		/**	 * @see INCManager#getStreamLength()	 */	public function getStreamLength():Number {		return undefined;	}	/**	 * @see INCManager#getStreamWidth()	 */	public function getStreamWidth():Number {		return undefined;	}	/**	 * @see INCManager#getStreamHeight()	 */	public function getStreamHeight():Number {		return undefined;	}	/**	 * @see INCManager#connectToURL()	 */	public function connectToURL(url:String):Boolean {		//ifdef DEBUG		//debugTrace("connectToURL(" + url + ")");		//endif		// init		_contentPath = url;		if (_contentPath == null || _contentPath == undefined || _contentPath == "") {			throw new VideoError(VideoError.INVALID_CONTENT_PATH);		}		if (_nc == undefined) {			_nc = new NetConnection();			_nc.connect(url);		}		return true;	}	/**	 * @see INCManager#connectAgain()	 */	public function connectAgain():Boolean	{		return true;	}	/**	 * @see INCManager#reconnect()	 */	public function reconnect():Void	{		// do nothing	}	/**	 * @see INCManager#close	 */	public function close():Void {		// do nothing	}	/**	 * Called by <code>SMILManager</code> when done.	 *	 * @see INCManager#helperDone()	 */	public function helperDone(helper:Object, success:Boolean) {		// do nothing	}	//ifdef DEBUG	//public function debugTrace(s:String):Void	//{	//	if (_owner != undefined) {	//		_owner.debugTrace("#NCManager# " + s);	//	}	//}	//endif} // class ProgressiveOnlyNCManager